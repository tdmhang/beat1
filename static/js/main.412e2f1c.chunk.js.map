{"version":3,"sources":["click1.wav","click2.wav","Metronome.js","registerServiceWorker.js","index.js"],"names":["module","exports","Metronome","props","playClick","state","count","beatsPerMeasure","click2","play","click1","setState","startStop","playing","clearInterval","timer","setInterval","bpm","handleBpmChange","event","target","value","Audio","this","className","type","min","max","onChange","onClick","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"qFAAAA,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,sOCuG5BC,E,YA/Fb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAeRC,UAAY,WAAO,IAAD,EACmB,EAAKC,MADxB,EACRC,MADQ,EACDC,kBAGgB,EAC7B,EAAKC,OAAOC,OAEZ,EAAKC,OAAOD,OAId,EAAKE,UAAS,SAAAN,GAAK,MAAK,CACtBC,OAAQD,EAAMC,MAAQ,GAAKD,EAAME,qBA5BlB,EAgCnBK,UAAY,WACP,EAAKP,MAAMQ,SAEZC,cAAc,EAAKC,OACnB,EAAKJ,SAAS,CACZE,SAAS,MAIX,EAAKE,MAAQC,YAAY,EAAKZ,UAAY,GAAK,EAAKC,MAAMY,IAAO,KACjE,EAAKN,SAAS,CACZL,MAAO,EACPO,SAAS,GAER,EAAKT,aA9CO,EAkDnBc,gBAAkB,SAAAC,GAChB,IAAMF,EAAME,EAAMC,OAAOC,MAEtB,EAAKhB,MAAMQ,SAEZC,cAAc,EAAKC,OACnB,EAAKA,MAAQC,YAAY,EAAKZ,UAAY,GAAKa,EAAO,KAGtD,EAAKN,SAAS,CACZL,MAAO,EACPW,SAIF,EAAKN,SAAS,CAAEM,SA9DlB,EAAKZ,MAAQ,CACXQ,SAAS,EACTP,MAAO,EACPW,IAAK,IACLV,gBAAiB,GAKnB,EAAKG,OAAS,IAAIY,MAAMZ,KACxB,EAAKF,OAAS,IAAIc,MAAMd,KAbP,E,sEAsET,IAAD,EACkBe,KAAKlB,MAAtBQ,EADD,EACCA,QAASI,EADV,EACUA,IAEjB,OACE,yBAAKO,UAAU,aACf,yBAAKA,UAAU,aAAa,gFAC1B,yBAAKA,UAAU,cACb,kDAASP,EAAT,QACA,2BACEQ,KAAK,QACLC,IAAI,KACJC,IAAI,MACJN,MAAOJ,EACPW,SAAUL,KAAKL,mBAEnB,4BAAQW,QAASN,KAAKX,WACnBC,EAAU,2BAAS,4BAGtB,kE,GA1FgBiB,aCGlBC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBxC,QACfkC,UAAUC,cAAcQ,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBC,OAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,MChEjEC,IAASC,OAAO,kBAAC,EAAD,MAAcC,SAASC,eAAe,SDcvC,WACb,GAA6C,kBAAmBjB,UAAW,CAGzE,GADkB,IAAIkB,IAAIC,SAAwBzB,OAAOC,UAC3CyB,SAAW1B,OAAOC,SAASyB,OAIvC,OAGF1B,OAAO2B,iBAAiB,QAAQ,WAC9B,IAAMtB,EAAK,UAAMoB,SAAN,sBAEN3B,EAwCX,SAAiCO,GAE/BuB,MAAMvB,GACHI,MAAK,SAAAoB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C3B,UAAUC,cAAc2B,MAAMzB,MAAK,SAAAC,GACjCA,EAAayB,aAAa1B,MAAK,WAC7BT,OAAOC,SAASmC,eAKpBhC,EAAgBC,MAGnBa,OAAM,WACLF,QAAQC,IACN,oEAzDAoB,CAAwBhC,GAHxBD,EAAgBC,OC7BxBiC,K","file":"static/js/main.412e2f1c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/click1.7a7930a2.wav\";","module.exports = __webpack_public_path__ + \"static/media/click2.fe0ded65.wav\";","import React, { Component } from 'react';\nimport './Metronome.css';\n\n// Webpack will load the audio files\nimport click1 from './click1.wav';\nimport click2 from './click2.wav';\n\nclass Metronome extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      playing: false,\n      count: 0,\n      bpm: 100,\n      beatsPerMeasure: 4\n    };\n\n    // Create Audio objects with the files Webpack loaded,\n    // and we'll play them later.\n    this.click1 = new Audio(click1);\n    this.click2 = new Audio(click2);\n  }\n\n  playClick = () => {\n    const { count, beatsPerMeasure } = this.state;\n\n    // The first beat will have a different sound than the others\n    if(count % beatsPerMeasure === 0) {\n      this.click2.play();\n    } else {\n      this.click1.play();\n    }\n\n    // Keep track of which beat we're on\n    this.setState(state => ({\n      count: (state.count + 1) % state.beatsPerMeasure\n    }));\n  }\n\n  startStop = () => {\n    if(this.state.playing) {\n      // Stop the timer\n      clearInterval(this.timer);\n      this.setState({\n        playing: false\n      });\n    } else {\n      // Start a timer with the current BPM\n      this.timer = setInterval(this.playClick, (60 / this.state.bpm) * 1000);\n      this.setState({\n        count: 0,\n        playing: true\n        // Play a click \"immediately\" (after setState finishes)\n      }, this.playClick);\n    }\n  }\n\n  handleBpmChange = event => {\n    const bpm = event.target.value;\n\n    if(this.state.playing) {\n      // Stop the old timer and start a new one\n      clearInterval(this.timer);\n      this.timer = setInterval(this.playClick, (60 / bpm) * 1000);\n\n      // Set the new BPM, and reset the beat counter\n      this.setState({\n        count: 0,\n        bpm\n      });\n    } else {\n      // Otherwise just update the BPM\n      this.setState({ bpm });\n    }\n\n  }\n\n  render() {\n    const { playing, bpm } = this.state;\n\n    return (\n      <div className=\"metronome\">\n      <div className=\"beginning\" ><p>开始拖动频率条吧</p></div>\n        <div className=\"bpm-slider\">\n          <div>节拍：{bpm} BPM</div>\n          <input\n            type=\"range\"\n            min=\"60\"\n            max=\"240\"\n            value={bpm}\n            onChange={this.handleBpmChange} />\n        </div>\n        <button onClick={this.startStop}>\n          {playing ? '停止播放' : '继续播放'}\n        </button>\n\n        <h2>Created by 杨一涛</h2>\n      </div>\n    );\n  }\n}\n\nexport default Metronome;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Metronome from './Metronome';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<Metronome/>, document.getElementById('root'));\nregisterServiceWorker();\n\n"],"sourceRoot":""}